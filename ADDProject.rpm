<?xml version="1.0" encoding="UTF-8"?><process version="8.1.003">
  <context>
    <input/>
    <output/>
    <macros/>
  </context>
  <operator activated="true" class="process" compatibility="8.1.003" expanded="true" name="Process">
    <parameter key="logverbosity" value="init"/>
    <parameter key="random_seed" value="2001"/>
    <parameter key="send_mail" value="never"/>
    <parameter key="notification_email" value=""/>
    <parameter key="process_duration_for_mail" value="30"/>
    <parameter key="encoding" value="SYSTEM"/>
    <process expanded="true">
      <operator activated="true" class="retrieve" compatibility="8.1.003" expanded="true" height="68" name="Retrieve project_movies" width="90" x="45" y="34">
        <parameter key="repository_entry" value="//Local Repository/data/project_movies"/>
      </operator>
      <operator activated="true" class="generate_attributes" compatibility="8.1.003" expanded="true" height="82" name="Generate Attributes" width="90" x="179" y="34">
        <list key="function_descriptions">
          <parameter key="year" value="cut(title, length(title) - 5, 4)"/>
          <parameter key="movieId" value="movieId"/>
          <parameter key="title" value="cut(title, 0, length(title) - 6)"/>
          <parameter key="genres" value="genres"/>
        </list>
        <parameter key="keep_all" value="false"/>
      </operator>
      <operator activated="true" class="split" compatibility="8.1.003" expanded="true" height="82" name="Split" width="90" x="313" y="34">
        <parameter key="attribute_filter_type" value="single"/>
        <parameter key="attribute" value="genres"/>
        <parameter key="attributes" value=""/>
        <parameter key="use_except_expression" value="false"/>
        <parameter key="value_type" value="nominal"/>
        <parameter key="use_value_type_exception" value="false"/>
        <parameter key="except_value_type" value="file_path"/>
        <parameter key="block_type" value="single_value"/>
        <parameter key="use_block_type_exception" value="false"/>
        <parameter key="except_block_type" value="single_value"/>
        <parameter key="invert_selection" value="false"/>
        <parameter key="include_special_attributes" value="false"/>
        <parameter key="split_pattern" value="\|"/>
        <parameter key="split_mode" value="ordered_split"/>
      </operator>
      <operator activated="true" class="select_attributes" compatibility="8.1.003" expanded="true" height="82" name="Select Attributes" width="90" x="447" y="34">
        <parameter key="attribute_filter_type" value="subset"/>
        <parameter key="attribute" value=""/>
        <parameter key="attributes" value="genres_9|genres_8|genres_7|genres_6|genres_5|genres_10"/>
        <parameter key="use_except_expression" value="false"/>
        <parameter key="value_type" value="attribute_value"/>
        <parameter key="use_value_type_exception" value="false"/>
        <parameter key="except_value_type" value="time"/>
        <parameter key="block_type" value="attribute_block"/>
        <parameter key="use_block_type_exception" value="false"/>
        <parameter key="except_block_type" value="value_matrix_row_start"/>
        <parameter key="invert_selection" value="true"/>
        <parameter key="include_special_attributes" value="false"/>
      </operator>
      <operator activated="true" class="retrieve" compatibility="8.1.003" expanded="true" height="68" name="Retrieve project_ratings" width="90" x="45" y="187">
        <parameter key="repository_entry" value="//Local Repository/data/project_ratings"/>
      </operator>
      <operator activated="true" class="execute_script" compatibility="8.1.003" expanded="true" height="82" name="Execute Script (2)" width="90" x="179" y="187">
        <parameter key="script" value="/*&#10; * You can use both Java and Groovy syntax in this script.&#10; *&#10; * Note that you have access to the following two predefined variables:&#10; * 1) input (an array of all input data)&#10; * 2) operator (the operator instance which is running this script)&#10; */&#10;&#10;// Take first input data and treat it as generic IOObject&#10;// Alternatively, you could treat it as an ExampleSet if it is one:&#10; ExampleSet inputData = input[0];&#10;//IOObject inputData = input[0];&#10;&#10;Map&lt;Integer, Set&lt;Double&gt;&gt; output = new HashMap&lt;Integer, HashSet&lt;Double&gt;&gt;();&#10;&#10;ExampleSet inputExampleSet = input[0];&#10;&#10;Attributes inputAttributes = inputExampleSet.getAttributes();&#10;Attribute ratingAttibute = inputAttributes.get(&quot;rating&quot;);&#10;Attribute movieIdAttibute = inputAttributes.get(&quot;movieId&quot;);&#10;&#10;for (Example actExample : inputExampleSet) {&#10;  Double ratingValue = actExample.getNumericalValue(ratingAttibute);&#10;  Integer movieIdValue = (Integer) actExample.getNumericalValue(movieIdAttibute);&#10;&#10;  if (!output.containsKey(movieIdValue)) {&#10;    Set ratingSet = new HashSet&lt;String&gt;();&#10;    ratingSet.add(ratingValue);&#10;    output.put(movieIdValue, ratingSet);&#10;  } else {&#10;    output.get(movieIdValue).add(ratingValue);&#10;  }&#10;}&#10;&#10;// create a table. Reference: https://community.rapidminer.com/t5/Developer-Forum/SOLVED-build-an-example-set-object-in-JAVA-and-pass-it-to/td-p/22469&#10;MemoryExampleTable table = new MemoryExampleTable();&#10;&#10;//Attribute movieIdAttr = AttributeFactory.createAttribute(&quot;movieId&quot;, Ontology.INTEGER);&#10;//Attribute tagsAttr = AttributeFactory.createAttribute(&quot;tags&quot;, Ontology.NOMINAL);&#10;&#10;table.addAttribute(movieIdAttibute);&#10;table.addAttribute(ratingAttibute);&#10;&#10;for (Map.Entry&lt;Integer, Set&lt;Double&gt;&gt; entry : output.entrySet()) {&#10;  Integer movieId = entry.getKey();&#10;  List&lt;Double&gt; ratings = new ArrayList&lt;Double&gt;(entry.getValue());&#10;&#10;  DataRow row = new DoubleSparseArrayDataRow();&#10;  row.set(movieIdAttibute, movieId);&#10;  row.set(ratingAttibute, ratings.sum() / ratings.size());&#10;&#10;//  String tagsString = &quot;&quot;;&#10;//&#10;//  for (int i = 0; i &lt; tags.size(); i++) {&#10;//  &#9;tagsString += tags.get(i) + &quot;,&quot;;&#10;//  }&#10;&#10;//  row.set(tagAttibute, tagAttibute.getMapping().mapString(String.join(&quot;,&quot;, tags)));&#10;&#10;  table.addDataRow(row);&#10;}&#10;&#10;return table.createExampleSet();&#10;&#10;// This line returns the first input as the first output&#10;// return output;"/>
        <parameter key="standard_imports" value="true"/>
      </operator>
      <operator activated="true" class="retrieve" compatibility="8.1.003" expanded="true" height="68" name="Retrieve project_tags" width="90" x="45" y="289">
        <parameter key="repository_entry" value="//Local Repository/data/project_tags"/>
      </operator>
      <operator activated="true" class="concurrency:join" compatibility="8.1.003" expanded="true" height="82" name="Join" width="90" x="313" y="136">
        <parameter key="remove_double_attributes" value="true"/>
        <parameter key="join_type" value="left"/>
        <parameter key="use_id_attribute_as_key" value="false"/>
        <list key="key_attributes">
          <parameter key="movieId" value="movieId"/>
        </list>
        <parameter key="keep_both_join_attributes" value="false"/>
      </operator>
      <operator activated="true" class="execute_script" compatibility="8.1.003" expanded="true" height="82" name="Execute Script" width="90" x="179" y="289">
        <parameter key="script" value="/*&#10; * You can use both Java and Groovy syntax in this script.&#10; *&#10; * Note that you have access to the following two predefined variables:&#10; * 1) input (an array of all input data)&#10; * 2) operator (the operator instance which is running this script)&#10; */&#10;&#10;// Take first input data and treat it as generic IOObject&#10;// Alternatively, you could treat it as an ExampleSet if it is one:&#10; ExampleSet inputData = input[0];&#10;//IOObject inputData = input[0];&#10;&#10;Map&lt;Integer, Set&lt;String&gt;&gt; output = new HashMap&lt;Integer, HashSet&lt;String&gt;&gt;();&#10;&#10;ExampleSet inputExampleSet = input[0];&#10;&#10;Attributes inputAttributes = inputExampleSet.getAttributes();&#10;Attribute tagAttibute = inputAttributes.get(&quot;tag&quot;);&#10;Attribute movieIdAttibute = inputAttributes.get(&quot;movieId&quot;);&#10;&#10;for (Example actExample : inputExampleSet) {&#10;  String tagValue = actExample.getNominalValue(tagAttibute);&#10;  Integer movieIdValue = (Integer) actExample.getNumericalValue(movieIdAttibute);&#10;&#10;  if (!output.containsKey(movieIdValue)) {&#10;    Set tagSet = new HashSet&lt;String&gt;();&#10;    tagSet.add(tagValue);&#10;    output.put(movieIdValue, tagSet);&#10;  } else {&#10;    output.get(movieIdValue).add(tagValue);&#10;  }&#10;}&#10;&#10;// create a table. Reference: https://community.rapidminer.com/t5/Developer-Forum/SOLVED-build-an-example-set-object-in-JAVA-and-pass-it-to/td-p/22469&#10;MemoryExampleTable table = new MemoryExampleTable();&#10;&#10;//Attribute movieIdAttr = AttributeFactory.createAttribute(&quot;movieId&quot;, Ontology.INTEGER);&#10;//Attribute tagsAttr = AttributeFactory.createAttribute(&quot;tags&quot;, Ontology.NOMINAL);&#10;&#10;table.addAttribute(tagAttibute);&#10;table.addAttribute(movieIdAttibute);&#10;&#10;for (Map.Entry&lt;Integer, Set&lt;String&gt;&gt; entry : output.entrySet()) {&#10;  Integer movieId = entry.getKey();&#10;  List&lt;String&gt; tags = new ArrayList&lt;String&gt;(entry.getValue());&#10;&#10;  DataRow row = new DoubleSparseArrayDataRow();&#10;  row.set(movieIdAttibute, movieId);&#10;&#10;//  String tagsString = &quot;&quot;;&#10;//&#10;//  for (int i = 0; i &lt; tags.size(); i++) {&#10;//  &#9;tagsString += tags.get(i) + &quot;,&quot;;&#10;//  }&#10;&#10;  row.set(tagAttibute, tagAttibute.getMapping().mapString(String.join(&quot;,&quot;, tags)));&#10;&#10;  table.addDataRow(row);&#10;}&#10;&#10;return table.createExampleSet();&#10;&#10;// This line returns the first input as the first output&#10;// return output;"/>
        <parameter key="standard_imports" value="true"/>
      </operator>
      <operator activated="true" class="split" compatibility="8.1.003" expanded="true" height="82" name="Split (2)" width="90" x="313" y="289">
        <parameter key="attribute_filter_type" value="single"/>
        <parameter key="attribute" value="tag"/>
        <parameter key="attributes" value=""/>
        <parameter key="use_except_expression" value="false"/>
        <parameter key="value_type" value="nominal"/>
        <parameter key="use_value_type_exception" value="false"/>
        <parameter key="except_value_type" value="file_path"/>
        <parameter key="block_type" value="single_value"/>
        <parameter key="use_block_type_exception" value="false"/>
        <parameter key="except_block_type" value="single_value"/>
        <parameter key="invert_selection" value="false"/>
        <parameter key="include_special_attributes" value="false"/>
        <parameter key="split_pattern" value=","/>
        <parameter key="split_mode" value="ordered_split"/>
      </operator>
      <operator activated="true" class="select_attributes" compatibility="8.1.003" expanded="true" height="82" name="Select Attributes (2)" width="90" x="447" y="289">
        <parameter key="attribute_filter_type" value="subset"/>
        <parameter key="attribute" value=""/>
        <parameter key="attributes" value="|tag_11|tag_12|tag_13|tag_14|tag_15|tag_16|tag_17|tag_18|tag_19|tag_20|tag_21|tag_22|tag_23|tag_24|tag_25|tag_26|tag_27"/>
        <parameter key="use_except_expression" value="false"/>
        <parameter key="value_type" value="attribute_value"/>
        <parameter key="use_value_type_exception" value="false"/>
        <parameter key="except_value_type" value="time"/>
        <parameter key="block_type" value="attribute_block"/>
        <parameter key="use_block_type_exception" value="false"/>
        <parameter key="except_block_type" value="value_matrix_row_start"/>
        <parameter key="invert_selection" value="true"/>
        <parameter key="include_special_attributes" value="false"/>
      </operator>
      <operator activated="true" class="concurrency:join" compatibility="8.1.003" expanded="true" height="82" name="Join (2)" width="90" x="447" y="187">
        <parameter key="remove_double_attributes" value="true"/>
        <parameter key="join_type" value="left"/>
        <parameter key="use_id_attribute_as_key" value="false"/>
        <list key="key_attributes">
          <parameter key="movieId" value="movieId"/>
        </list>
        <parameter key="keep_both_join_attributes" value="false"/>
      </operator>
      <operator activated="true" class="filter_examples" compatibility="8.1.003" expanded="true" height="103" name="Filter Examples" width="90" x="581" y="187">
        <parameter key="parameter_expression" value=""/>
        <parameter key="condition_class" value="custom_filters"/>
        <parameter key="invert_filter" value="false"/>
        <list key="filters_list">
          <parameter key="filters_entry_key" value="rating.is_not_missing."/>
        </list>
        <parameter key="filters_logic_and" value="true"/>
        <parameter key="filters_check_metadata" value="true"/>
      </operator>
      <operator activated="true" class="set_role" compatibility="8.1.003" expanded="true" height="82" name="Set Role" width="90" x="715" y="187">
        <parameter key="attribute_name" value="rating"/>
        <parameter key="target_role" value="label"/>
        <list key="set_additional_roles"/>
      </operator>
      <connect from_op="Retrieve project_movies" from_port="output" to_op="Generate Attributes" to_port="example set input"/>
      <connect from_op="Generate Attributes" from_port="example set output" to_op="Split" to_port="example set input"/>
      <connect from_op="Split" from_port="example set output" to_op="Select Attributes" to_port="example set input"/>
      <connect from_op="Select Attributes" from_port="example set output" to_op="Join" to_port="left"/>
      <connect from_op="Retrieve project_ratings" from_port="output" to_op="Execute Script (2)" to_port="input 1"/>
      <connect from_op="Execute Script (2)" from_port="output 1" to_op="Join" to_port="right"/>
      <connect from_op="Retrieve project_tags" from_port="output" to_op="Execute Script" to_port="input 1"/>
      <connect from_op="Join" from_port="join" to_op="Join (2)" to_port="left"/>
      <connect from_op="Execute Script" from_port="output 1" to_op="Split (2)" to_port="example set input"/>
      <connect from_op="Split (2)" from_port="example set output" to_op="Select Attributes (2)" to_port="example set input"/>
      <connect from_op="Select Attributes (2)" from_port="example set output" to_op="Join (2)" to_port="right"/>
      <connect from_op="Join (2)" from_port="join" to_op="Filter Examples" to_port="example set input"/>
      <connect from_op="Filter Examples" from_port="example set output" to_op="Set Role" to_port="example set input"/>
      <connect from_op="Set Role" from_port="example set output" to_port="result 1"/>
      <portSpacing port="source_input 1" spacing="0"/>
      <portSpacing port="sink_result 1" spacing="0"/>
      <portSpacing port="sink_result 2" spacing="0"/>
    </process>
  </operator>
</process>
